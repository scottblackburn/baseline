/*--------------------------------

    Media Queries

    used for outputting content either between media query tags, or without (for fixed-width.scss)

    example: basic usage

    .element {
        width: 50%;

        @include mq("tablet-small") {
            width: 20%;
        }
    }

    example: using max-width

    .element {
        width: 50%;

        @include mq("tablet-small", "max") {
            width: 20%;
        }
    }

*/

$fixed-width:       false !default;
$fixed-width-limit: 980px !default;

@mixin mq($width, $type: min) {

    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);

        @if $type == max {
            $width: $width - 1px;
        }
    }

    @if $fixed-width {

        @if $width <= $fixed-width-limit {
            @content;
        }

    } @else {

        @media only screen and (#{$type}-width: $width) {
            @content;
        }

    }

}

/*--------------------------------

    Responsive ratio

    Used for creating scalable elements that maintain the same ratio

    example:
    .element {
        @include responsive-ratio(400, 300);
    }

*/

@mixin responsive-ratio($x,$y, $pseudo: false) {
    $padding: unquote( ( $y / $x ) * 100 + '%' );

    @if $pseudo {
        &:before {
            @include pseudo($pos: relative);
            width: 100%;
            padding-top: $padding;
        }
    } @else {
        padding-top: $padding;
    }
}

/*--------------------------------

    Typography

    Text image replacement, with responsive ratio

    HTML:

    <h1 class="element">
        <span>Text to replace</span>
    </h1>

    example:
    .element {
        @include typography(200, 50, 'hello-world');
    }


*/

@mixin typography($w, $h, $file, $type: png, $overflow: hidden) {
    @include responsive-ratio($w, $h, true);
    position: relative;
    max-width: ( $w / 10 ) * 1rem;
    background: url('/assets/img/typography/#{$file}.#{$type}') 50% 50% no-repeat;
    background-size: contain;

    span {
        @include hide-text(true, $overflow: $overflow);
    }
}



/*--------------------------------

    CSS Triangle

    used for creating CSS only triangles

    example:
    .element {

        &:before {
            @include css-triangle(blue, down);
        }
    }

*/

@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){
    @include pseudo($pos: $position);
    width: 0;
    height: 0;

    @if $round {
        border-radius: 3px;
    }

    @if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
        margin-top: 0 - round( $size / 2.5 );
    } @else if $direction == up {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
        margin-bottom: 0 - round( $size / 2.5 );
    } @else if $direction == right {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        margin-right: -$size;
    } @else if  $direction == left {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        margin-left: -$size;
    }
}




/*--------------------------------

    Helper mixins

*/

// Contain floats / clearfix

@mixin cf {

    &:after {
        content: "";
        display: table;
        clear: both;
    }
}


// Image replacement

@mixin ir {
    display: block;
    background: {
        repeat: no-repeat;
        position: 0 0;
    }
    overflow: hidden;
    text-indent: 100%;
    white-space: nowrap;
}


// Hide from both screenreaders and browsers

@mixin hidden {
    display: none;
    visibility: hidden;
}

@mixin visible($state: 'block') {
    display: unquote($state);
    visibility: visible;
}


// Hide only visually, but have it available for screenreaders

@mixin vh($focusable: false) {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;

    @if $focusable {
        @include vh-focusable;
    }
}

@mixin vh-reset {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
}


// Allow the element to be focusable when navigated to via the keyboard

@mixin vh-focusable {

    &:active,
    &:focus {
        clip: auto;
        height: auto;
        margin: 0;
        overflow: visible;
        position: static;
        width: auto;
    }
}


// Hide visually and from screenreaders, but maintain layout

@mixin invisible {
    visibility: hidden;
}



/*--------------------------------

    Misc

*/

@mixin antialias {
    font-smoothing: antialiased;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

@mixin hardware($backface: true, $perspective: 1000) {

    @if $backface {
        backface-visibility: hidden;
    }

    perspective: $perspective;
}

@mixin pseudo($display: block, $pos: absolute, $content: ''){
    content: $content;
    display: $display;
    position: $pos;
}

@mixin selection {
    ::-moz-selection { @content; }
    ::selection { @content; }
}

